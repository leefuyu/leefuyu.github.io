<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax实现聊天机器人案例</title>
      <link href="/blog/Ajax%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%88%E4%BE%8B/"/>
      <url>/blog/Ajax%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="聊天机器人接口文档"><a href="#聊天机器人接口文档" class="headerlink" title="聊天机器人接口文档"></a>聊天机器人接口文档</h1><h2 id="请求的根路径"><a href="#请求的根路径" class="headerlink" title="请求的根路径"></a>请求的根路径</h2><blockquote><p><a href="http://www.liulongbin.top:3006">http://www.liulongbin.top:3006</a></p></blockquote><h2 id="获取机器人回应的内容"><a href="#获取机器人回应的内容" class="headerlink" title="获取机器人回应的内容"></a>获取机器人回应的内容</h2><ul><li>接口URL：  /api/robot</li><li>调用方式： GET</li><li>参数格式：<br>| 参数名称 | 参数类型 | 是否必选 | 参数说明                         |<br>| ———— | ———— | ———— | ———————————————— |<br>| spoken   | String   | 是       | 用户输入的内容(要跟机器人说的话) |</li><li>响应格式：<br>| 数据名称 | 数据类型 | 说明                     |<br>| ———— | ———— | ———————————— |<br>| message  | String   | 对 status 字段的详细说明 |<br>| data     | Object   | 信息列表                 |<br>| +type    | Number   | 分类标记                 |<br>| +info    | Object   | 详细信息                 |<br>| ++text   | String   | 机器人回应的内容         |</li><li>返回示例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;info&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;今天天气不错哦~&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="number">5000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将文字转换为语音"><a href="#将文字转换为语音" class="headerlink" title="将文字转换为语音"></a>将文字转换为语音</h2><ul><li>接口URL：  /api/synthesize</li><li>调用方式： GET</li><li>参数格式：<br>| 参数名称 | 参数类型 | 是否必选 | 参数说明 |<br>| ———— | ———— | ———— | ———— |<br>| text     | String   | 是       |          |</li><li>响应格式：<br>| 数据名称 | 数据类型 | 说明                         |<br>| ———— | ———— | —————————————— |<br>| status   | Number   | 200 添加成功；500 添加失败； |<br>| message  | String   | 对 status 字段的详细说明     |<br>| voiceUrl | String   | 语音地址                     |</li><li>返回示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;message: &quot;</span>success<span class="attr">&quot;,</span></span><br><span class="line"><span class="attr">&quot;</span>status<span class="attr">&quot;: 200,</span></span><br><span class="line"><span class="attr">&quot;</span>voiceUrl<span class="attr">&quot;: &quot;</span>https:<span class="comment">//dds.dui.ai/runtime/v1/synthesize?voiceId=q...&quot; // 略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="jiqirenAi.jpg" alt="效果图"><br><strong>思路:</strong><br>1.准备初始化数据<br>2.遍历对应的数据<br>3.在遍历的结构对应到的结构 —-根据name进行判断</li></ul><ul><li>如果name为robot  生成结构中的类名是 left_word</li><li>如果name为user  生成结构中的类名是 right_word<br>4.拼接+渲染</li></ul><p><strong>步骤</strong><br>1.发送按钮注册点击事件<br>2.将输入框的内容添加到数组中。arr数据 arr.push()  —-函数调用 重新渲染<br>3.将用户输入的内容发送给 服务器 ，将返回的接口信息添加到数组中 ，重新渲染<br>4.将接口返回的信息 转为语音， 更换 语音标签的car路径<br>5.给文本框注册键盘事件 </p><p><strong>优化点：</strong></p><ol><li>页面的滚动  <strong>list.scrollTop = 被卷的高度 - 页面视口高度</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    数据操作视图——》把页面中所有需要渲染的数据(name, words)储存起来，当数据更改重新渲染数据即可</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 此结构无法辨别身份</span></span><br><span class="line">  <span class="comment">// const arr = [&#x27;嗨，最近想我没有？&#x27;, &#x27;并没有&#x27;, &#x27;你吃了么&#x27;, &#x27;刚刚吃过&#x27;]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// name:  区分身份, robot (机器人) / user (自己)  比如是机器人或者是自己</span></span><br><span class="line">  <span class="comment">// words: 所说的话/内容</span></span><br><span class="line">  <span class="keyword">const</span> arr = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;robot&#x27;</span>, </span><br><span class="line">      <span class="attr">words</span>: <span class="string">&#x27;嗨，最近想我没有？&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">      <span class="attr">words</span>: <span class="string">&#x27;并没有&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;robot&#x27;</span>, </span><br><span class="line">      <span class="attr">words</span>: <span class="string">&#x27;你吃了么?&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">      <span class="attr">words</span>: <span class="string">&#x27;刚刚吃过&#x27;</span> </span><br><span class="line">   &#125;</span><br><span class="line">]</span><br><span class="line">  <span class="comment">// 根据数据渲染视图——》封装一个渲染函数------------------------------------------------</span></span><br><span class="line">  <span class="comment">// 1. 遍历arr数据</span></span><br><span class="line">  <span class="comment">// 2. 遍历的过程中, 生成对应的结构 - 根据 name进行判断</span></span><br><span class="line">  <span class="comment">// 2.1 如果name 为robot -&gt; 生成的结构中类名是left_word</span></span><br><span class="line">  <span class="comment">// 2.2 如果name 为user  -&gt; 生成的结构中类名是right_word</span></span><br><span class="line">  <span class="comment">// 3. 拼接+渲染</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ul结构</span></span><br><span class="line">  <span class="comment">// 找对象 ul, 发送按钮, 输入框, 音频------------------------------------------------------</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#talk_list&#x27;</span>) </span><br><span class="line">  <span class="keyword">const</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#ipt&#x27;</span>)  <span class="comment">// 输入框</span></span><br><span class="line">  <span class="keyword">const</span> btnSend = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnSend&#x27;</span>)  <span class="comment">// 发送按钮</span></span><br><span class="line">  <span class="keyword">const</span> voice = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#voice&#x27;</span>) <span class="comment">// 音频</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装一个渲染函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> htmlStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;----arr数据&#x27;</span>,arr)</span><br><span class="line">      arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.name === <span class="string">&#x27;robot&#x27;</span>) &#123;</span><br><span class="line">           <span class="comment">// 机器人说的话 - left_word</span></span><br><span class="line">          htmlStr += <span class="string">`&lt;li class=&quot;left_word&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;img src=&quot;img/person01.png&quot; /&gt; &lt;span&gt;<span class="subst">$&#123;item.words&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                      &lt;/li&gt;`</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 用户自己说的话 - right_word</span></span><br><span class="line">          htmlStr += <span class="string">`&lt;li class=&quot;right_word&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;img src=&quot;img/person02.png&quot; /&gt; &lt;span&gt;<span class="subst">$&#123;item.words&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                      &lt;/li&gt;`</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      list.innerHTML = htmlStr</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      <span class="comment">// 页面滚动</span></span><br><span class="line">      <span class="comment">// 当用户输入过多的时候，页面部分会被卷掉，看不到 我们需要用到 scrollHeight 和 clientHeight</span></span><br><span class="line">      <span class="comment">// list.scrollTop = 被卷的高度 - 页面视口高度</span></span><br><span class="line">      list.scrollTop = list.scrollHeight - list.clientHeight</span><br><span class="line">   &#125;</span><br><span class="line">   render()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给发送按钮注册点击事件，点击之后，往数组中添加user的数据-----------------------------</span></span><br><span class="line">  btnSend.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment">// 1.声明一个变量 保存 输入框输入的内容</span></span><br><span class="line">    <span class="keyword">const</span> count = ipt.value.trim()</span><br><span class="line">    <span class="comment">// 2.将输入框输入的内容 以键值对的形式 添加到数组中</span></span><br><span class="line">    arr.push(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">words</span>: count</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 3.判断用户加入输入的为空   就不渲染</span></span><br><span class="line">    <span class="keyword">if</span> (count === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 4.重新渲染</span></span><br><span class="line">    render()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.渲染之后将输入框恢复默认</span></span><br><span class="line">    ipt.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户输入之后，需要把用户输入的数据发送给服务器，由机器人回复内容------------------------</span></span><br><span class="line">    <span class="comment">// http://ajax-api.itheima.net/api/robot</span></span><br><span class="line">    <span class="comment">// 1.将数据发送给服务器</span></span><br><span class="line">    axios(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;http://ajax-api.itheima.net/api/robot&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">spoken</span>: count</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">&#123;data : res&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 机器人回复的信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(res.data.info.text)</span><br><span class="line">      <span class="comment">// 用变量接受接口返回的数据</span></span><br><span class="line">      <span class="keyword">let</span> text = res.data.info.text</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断message</span></span><br><span class="line">      <span class="keyword">if</span> (res.message === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 将机器的添加到数组中</span></span><br><span class="line">        arr.push(&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;robot&#x27;</span>,</span><br><span class="line">          <span class="attr">words</span>: text</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        render()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取/播放语音------------------------------------------------------------</span></span><br><span class="line">      <span class="comment">// 将机器人的回复的话 转为语音</span></span><br><span class="line">      <span class="comment">// http://ajax-base-api-t.itheima.net/api/synthesize</span></span><br><span class="line">      axios(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/synthesize&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">          <span class="comment">// 简写</span></span><br><span class="line">          text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then( <span class="function">(<span class="params">&#123;data : res&#125;</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (res.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">          <span class="comment">// 找到语音标签 添加音频路径</span></span><br><span class="line">          voice.src = res.voiceUrl</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给输入框注册keyup事件，让输入框可以做到回车发布</span></span><br><span class="line">  ipt.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.key === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">      btnSend.click()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><strong>clientHeight scrollHeight的区别是在于是否包括被卷去的距离/高度</strong></li></ol><p>页面滚动距离 <code>scrollHeight</code></p><p>视口高度 <code>clientHeight</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Promise的理解</title>
      <link href="/blog/Promise%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/blog/Promise%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、promise-的含义"><a href="#一、promise-的含义" class="headerlink" title="一、promise 的含义"></a>一、promise 的含义</h1><p><strong>promise 设计之初，就是为了解决回调地狱的问题！</strong>  </p><p>它是一个 异步编程 的一种解决方案，简单来说它就是一个容器，里面储存着未来才会结束的事件的结果</p><h1 id="二、promise的理解"><a href="#二、promise的理解" class="headerlink" title="二、promise的理解"></a>二、promise的理解</h1><p><strong>白话</strong>：Promise主要是用来解决回调地狱问题的，它本身是一个构造函数，可以通过 new Promise()得到一个 Promise 的实例，它身上有两个函数一个resolve和reject，resolve是代表成功，reject是代表失败，同时它身上有,then()和.catch()两个方法,.then是我们成功之后调用的，.catch是失败后调用的，同时它也有三种状态，pending等待状态，fulfilled成功，rejected失败，三种状态都是由promise异步操作的结果来变化的，一旦发生改变了就不能修改，会状态凝固。</p><p>它还有两种静态方法，<strong>Promise.all</strong> 等待机制 和 Promise.rece 赛跑机制。</p><p><strong>Promise.all</strong>的特点是发起并行异步操作，等待所有都完成了，才会走.then</p><p><strong>Promise.rece</strong>的特点是 等待任何一个完成，就走<strong>.then</strong></p><p>1、<strong>Promise</strong>是一个构造函数，可以通过 <strong>new Promise()</strong>得到一个 <strong>Promise</strong> 的实例；</p><p>2、在 <strong>Promise</strong> 上，有两个函数，<strong>resolve</strong>（成功之后的回调函数） 和 <strong>reject</strong>（失败之后的回调函数）</p><p>3、<strong>Promise</strong> 构造函数的 <strong>Prototype</strong> 属性上，有一个 <strong>.then()</strong> 方法，也就说，只要是 <strong>Promise</strong> 构造函数创建的实例，都可以访问到这个  .then() 方法 </p><p>4、<strong>Promise</strong> 表示一个 异步操作</p><ul><li>每当我们 new 一个 Promise 的实例，这个实例，就表示一个具体的异步操作</li></ul><p>5、既然 Promise 创建的实例，是一个异步操作，那么，这个 异步操作的结果，只能有两种状态：</p><ul><li><strong>状态1： 异步执行成功了，需要在内部调用 成功的回调函数 resolve 把结果返回给调用者</strong></li><li><strong>状态2： 异步执行失败了，需要在内部调用 失败的回调函数 reject 把结果返回给调用者</strong></li></ul><p>6、Promise它有三种状态</p><ul><li><p>pending : 等待状态</p><ul><li>表示我们的异步事件还没有执行时的状态</li></ul></li><li><p>fulfilled: 成功 (已完成) </p><ul><li>表示我们的异步事件调用了resolve函数</li></ul></li><li><p>rejected: 失败（已拒绝）</p><ul><li>表示我们的异步事件调用了 reject函数</li></ul></li><li><p><strong>promise的状态是由异步操作的结果来决定的，一旦改变了状态就无法修改，会状态凝固</strong></p></li></ul><p>7、promise它有两个静态方法</p><ol><li><strong>Promise.all  （等待机制）</strong>  这个方法里放入异步操作，使用中括号包裹起来的</li></ol><ul><li><p><strong>语法：</strong></p><ul><li><p>```javascript<br>Promise.all( [ promise1, promise2, … ] ).then( values =&gt;  {} )</p></li><li><p>它的特点是 发起并行的promise异步操作，等待所有的异步操作完成， 才走.then()</p></li><li><p><strong>工作场景</strong>：在工作中 我们的首页我们想关闭roding的时候，页面全部加载完毕，我们就用到这个静态方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. **Promis.race（赛跑机制）**</span><br><span class="line"></span><br><span class="line">- - 它的特点是 发起并行的promise异步操作，只有任何一个异步操作完成，就走.then()</span><br><span class="line"></span><br><span class="line">  - ```JavaScript</span><br><span class="line">    Promise.race( [ promise1, promise2, ... ] ).then( values =&gt;  &#123;&#125; )</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="三、promise的链式编程"><a href="#三、promise的链式编程" class="headerlink" title="三、promise的链式编程"></a>三、promise的链式编程</h1><p>是为了解决回调地狱的，相对来说维护性更高一些</p><p>当我们需要处理多个promise时，我们可以使用链式调用</p><ul><li>如果上一个的.then()中返回了一个新的promise对象，我们则可以在下一个.then()继续处理</li><li>在promise的链式操作中，也可以使用catch()方法进行捕获或者处理</li></ul><h1 id="四、Promise与异步"><a href="#四、Promise与异步" class="headerlink" title="四、Promise与异步"></a>四、Promise与异步</h1><ul><li><p>当JS解析执行时，会被引擎分为两类任务，同步任务（synchronous） 和 异步任务（asynchronous）。</p></li><li><p>对于同步任务来说，会被推到执行栈按顺序去执行这些任务。</p></li><li><p>对于异步任务来说，当其可以被执行时，会被放到一个 任务队列（task queue） 里等待JS引擎去执行。</p></li><li><p>当执行栈中的所有同步任务完成后，JS引擎才会去任务队列里查看是否有任务存在，并将任务放到执行栈中去执行，执行完了又会去任务队列里查看是否有已经可以执行的任务。这种循环检查的机制，就叫做事件循环(Event Loop)。</p></li><li><p>对于任务队列，其实是有更细的分类。其被分为 微任务（microtask）队列 &amp; 宏任务（macrotask）队列</p></li><li><p>宏任务: setTimeout、setInterval等，会被放在宏任务（macrotask）队列。</p></li><li><p>微任务: Promise的then、Mutation Observer等，会被放在微任务（microtask）队列。</p></li><li><p>Event Loop的执行顺序是：</p><ul><li><p>首先执行执行栈里的任务。</p></li><li><p>执行栈清空后，检查微任务（microtask）队列，将可执行的微任务全部执行。</p></li><li><p>取宏任务（macrotask）队列中的第一项执行。</p></li></ul></li><li><p>回到第二步。 </p></li></ul><p><strong>注意：</strong> 微任务队列每次全执行，宏任务队列每次只取一项执行。</p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>封装自己的Ajax请求</title>
      <link href="/blog/%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84Ajax%E8%AF%B7%E6%B1%82/"/>
      <url>/blog/%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84Ajax%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>创建一个函数，函数的形参将变化的数据，当做形参放入函数</li></ol><ul><li>注意：放入函数中的形参，是结构出来的</li></ul><ol><li>在函数内创建new Prmise实例对象，并将其return</li><li>在promise对象中创建 xhr ，使用.open() .send() load() 的方法进行请求和监听</li><li>在.open() 中添加函数对应的请求方法和url</li><li>load事件获取接口返回的数据，是JSON字符串的格式，需要将数据转为JS数据，使用JSON.parse</li><li>创建error事件用来捕获错误，同时给出提示</li><li>判断传入的params是否有参数，如果有参数就循环遍历里面的所有的 键和值，并且进行拼接成字符串(注意点：判断需要放在.open()的上面，因为判断之后才放入url)</li><li>判断是否有post请求并且data有数据，根据数据类型的不同设置对应的编码格式</li></ol><ul><li>在判断进行二次判断数据类型</li><li>判断是否是查询字符串，设置xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’)。并且传入请求体xhr.send(data)</li><li>判断是否是formdata类型，使用instanceof进行检测，因为formdata数据类型比较特殊，浏览器会帮助我们设置请求数据类型，我们只需要发起请求体即可</li><li>上面判断数据类型都不是的话 就是 对象 数据类型，设置对应的请求格式并且传入的时候要将数据转为JSON格式</li></ul><p><strong>白话解释封装axios请求：</strong></p><p>我们需要将变化的数据放在函数，当做形参传入使用，比如请求方法请求的url和请求的数据，因为我们是原生的封装，所以我们需要用到Promise和XMLHttpRequset，基于这两个浏览器内置的方法进行请求，因为有不同的请求方式，我们需要进行判断，做对应的请求，post请求有很多种数据类型，所以我们还需要判断post请求以及请求的数据数据类型，根据数据类型设置对应的数据编码格式（xhr.setRequestHeader）来进行请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将动态变化的数据 放入函数的形参中   函数中的形参要结构出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">itheima</span>(<span class="params">&#123; method, url, params, data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 由于我们是原生封装  所以需要使用到 XHR 和 Promise</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建小黄人</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    <span class="comment">// 判断params是否有参数  如果有进行循环 拼接成字符串</span></span><br><span class="line">    <span class="keyword">if</span> (params !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = []</span><br><span class="line">      <span class="comment">// 循环数据中的所有键和值 </span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="comment">// 拼接进行保存</span></span><br><span class="line">        arr.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 拼接到url后面</span></span><br><span class="line">      url += <span class="string">&#x27;?&#x27;</span> + arr.join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求方式 和 请求的url</span></span><br><span class="line">    xhr.open(method, url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xhr.send()</span></span><br><span class="line">    <span class="comment">// 判断是否有POST请求  并且  data里面有数据</span></span><br><span class="line">    <span class="comment">// 然后根据数据类型做相应的判断,设置对应的数据编码格式</span></span><br><span class="line">    <span class="keyword">if</span> (method.toUpperCase() === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断是否查询字符串</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置请求数据的编码格式</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.send(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// formdata数据</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data <span class="keyword">instanceof</span> FormData) &#123;</span><br><span class="line">        <span class="comment">// formdata数据不需要设置编码格式,浏览器自动帮我们添加</span></span><br><span class="line">        xhr.send(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// json数据</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// / 设置请求数据的编码格式</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">        <span class="comment">// 请求体</span></span><br><span class="line">        xhr.send(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则就是get请求</span></span><br><span class="line">      xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听请求成功 load事件是一个异步函数</span></span><br><span class="line">    xhr.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="built_in">JSON</span>.parse(xhr.response))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听请求失败 error</span></span><br><span class="line">    xhr.addEventListener(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="string">&#x27;网络错误, 请求失败&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求</span></span><br><span class="line"><span class="keyword">let</span> btn1 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnGet&#x27;</span>)</span><br><span class="line">btn1.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  itheima(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3009/api/get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    alert(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="keyword">let</span> btn2 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnPost&#x27;</span>)</span><br><span class="line">btn2.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fd = <span class="keyword">new</span> FormData()</span><br><span class="line">  fd.append(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">  itheima(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3009/api/post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// data: fd</span></span><br><span class="line">    <span class="comment">// data: &#x27;name=zs&amp;age=18&#x27;</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    alert(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序的生命周期</title>
      <link href="/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="生命周期：小程序生命周期概要"><a href="#生命周期：小程序生命周期概要" class="headerlink" title="生命周期：小程序生命周期概要"></a>生命周期：小程序生命周期概要</h2><blockquote><p>了解生命周期的作用及小程序生命周期的分类</p></blockquote><p><strong>概念介绍</strong></p><ul><li><strong>生命周期</strong> 是框架代码在运行的过程中会经历的某些<strong>特定时间节点</strong>。</li><li><strong>生命周期钩子函数</strong> 是框架代码运行到特定生命周期时会调用的函数。(<strong>特定时间节点会执行的函数</strong>)</li></ul><p>以小程序为例，小程序框架会按某种特定的流程执行，并允许开发人员编写在特定阶段才会执行的代码，当小程序框架代码运行到这些阶段时，开发人员的代码被随之执行。<br>小程序中有两种生命周期：<strong>应用生命周期、页面生命周期</strong>。</p><hr><h2 id="生命周期：应用的生命周期"><a href="#生命周期：应用的生命周期" class="headerlink" title="生命周期：应用的生命周期"></a>生命周期：应用的生命周期</h2><blockquote><p>监听小程序应用级别的生命周期</p></blockquote><p><strong>操作步骤</strong></p><ol><li>在 app.js 中调用 App 函数来注册应用实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;&#125;)</span><br></pre></td></tr></table></figure><ol><li>在 App() 的参数中定义：onLaunch、onShow、onHide  等生命周期钩子函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 小程序启动时</span></span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 全局只会触发1次</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;小程序启动了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 小程序前台运行时</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 重复执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;小程序前台运行了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 小程序后台运行时</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 重复执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;小程序后台运行了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="生命周期：页面的生命周期"><a href="#生命周期：页面的生命周期" class="headerlink" title="生命周期：页面的生命周期"></a>生命周期：页面的生命周期</h2><blockquote><p>监听小程序页面级别的生命周期</p></blockquote><p><strong>操作步骤</strong></p><ol><li><p>生成一个新页面</p></li><li><p>页面js中的生命周期钩子函数</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 页面加载时触发，只会触发1次</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前页面被加载了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 当前页面初次渲染完毕时触发，只会触发1次</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前页面初次渲染完毕了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 页面显示时触发（如返回、tabBar切换、前台运行）</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前页面显示了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 页面隐藏时触发（跳转、tabBar切换、后台运行）</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前页面不见了...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 页面卸载(微信发现这个小程序很久没用了,会自己卸载,一般不用管)</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="生命周期：通过生命周期获取场景值"><a href="#生命周期：通过生命周期获取场景值" class="headerlink" title="生命周期：通过生命周期获取场景值"></a>生命周期：通过生命周期获取场景值</h2><blockquote><p>获知用户是通过什么途经进入到我们的小程序中</p></blockquote><p><strong>概念介绍</strong></p><p>打开小程序的方式多种多样，比如扫码、转发、搜索、公众号等。</p><p>通过场景值可以分辨出用户是以何种途径打开我们的小程序的。</p><p>场景值的实际作用：</p><ol><li>可以在程序中，按照不同的场景值为用户展示不同的界面</li><li>可以用来统计热门入口，帮助改善市场推广的策略，提升推广效率，降低推广成本</li></ol><p><strong>操作步骤</strong></p><ol><li>为 app.js 中的<strong>应用生命周期钩子函数</strong> <code>onLaunch</code> 和 <code>onShow</code> 添加参数，并从参数中获取场景值：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  <span class="function"><span class="title">onLaunch</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 根据打开小程序的方式不同 options.scene 的值也不一样</span></span><br><span class="line">    <span class="built_in">console</span>.log(options.scene);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">onShow</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 这里也可以获取场景值</span></span><br><span class="line">    <span class="built_in">console</span>.log(options.scene);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>模拟不同场景进入小程序</li></ol><hr><h2 id="生命周期：通过生命周期获取页面跳转参数"><a href="#生命周期：通过生命周期获取页面跳转参数" class="headerlink" title="生命周期：通过生命周期获取页面跳转参数"></a>生命周期：通过生命周期获取页面跳转参数</h2><blockquote><p>通过小程序的页面路径传参，并在目标页面中获取这些参数</p></blockquote><p><strong>概念介绍</strong></p><p>在通过页面路径访问小程序页面时，可在路径中携带<strong>查询字符串</strong>形式的参数，如：</p><p><code>/pages/test1/test1?name=Tom&amp;age=12</code></p><p>然后在该页面js中，可通过生命周期钩子 <code>onLoad</code>的参数获取传入的参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onLoad(options)</span><br></pre></td></tr></table></figure><p><code>test-link-a.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">goToPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/test-link-b/test-link-b?name=tom&amp;age=18&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>test-link-b.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">onLoad</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">goToPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">    wx.redirectTo(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/test-link-c/test-link-c&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序常用API</title>
      <link href="/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8API/"/>
      <url>/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="小程序-API：介绍"><a href="#小程序-API：介绍" class="headerlink" title="小程序 API：介绍"></a>小程序 API：介绍</h2><blockquote><p> 了解小程序 API 的功能和形式</p></blockquote><p>API 文档地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/">https://developers.weixin.qq.com/miniprogram/dev/api/</a></p><p><strong>概念介绍</strong></p><p>小程序 API 提供了很多功能，如：路由导航、显示弹框等、网络请求、文件操作、设备信息、地理定位、本地存储等等。<br>小程序 API 都放在全局对象 <code>wx</code> 中，并分同步和异步两种：</p><ol><li>方法名以 <code>Sync</code> 结尾的是同步 API</li><li>其他均为异步 API</li></ol><h2 id="31-小程序-API：网络相关"><a href="#31-小程序-API：网络相关" class="headerlink" title="31-小程序 API：网络相关"></a>31-小程序 API：网络相关</h2><blockquote><p>了解发起网络请求的 API</p></blockquote><p><strong>概念介绍</strong></p><ol><li>wx.request 发起网络请求</li></ol><p>【注意】</p><ul><li><p>在调用一个域名上的接口时，要先在<a href="https://mp.weixin.qq.com/wxamp/devprofile/get_profile?token=808612705&amp;lang=zh_CN">小程序管理后台</a>中<br><strong>配置域名白名单</strong>，即允许小程序调用该域名下的接口, 然后<br><strong>关闭项目, 重新启动</strong></p></li><li><p>在本地开发时，也可在开发者工具中设置不检查域名(临时)</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getHotMovies</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://wx.maoyan.com/mmdb/movie/v2/list/hot.json&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">ct</span>: <span class="string">&#x27;上海&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 成功的回调(箭头函数解决this问题)</span></span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          <span class="attr">hot</span>: res.data.data.hot</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;请求结束了&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;button bind:tap=<span class="string">&quot;getHotMovies&quot;</span>&gt;获取热门电影&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;hot&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span>&#123;&#123;item.nm&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="32-小程序-API：界面相关"><a href="#32-小程序-API：界面相关" class="headerlink" title="32-小程序 API：界面相关"></a>32-小程序 API：界面相关</h2><blockquote><p>了解界面弹窗相关的API</p></blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">https://developers.weixin.qq.com/miniprogram/dev/api/</a></p><p><strong>概念介绍</strong></p><ol><li>wx.showLoading / wx.hideLoading：显示/隐藏加载框</li><li>wx.showModal：显示确认框</li><li>wx.showToast：显示提示框</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">wx.showLoading(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;正在加载中...&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">wx.hideLoading()</span><br><span class="line"></span><br><span class="line">wx.showModal(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;弹出框标题&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;正文&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">wx.showToast(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;这是一条提示&#x27;</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="33-小程序-API：媒体相关"><a href="#33-小程序-API：媒体相关" class="headerlink" title="33-小程序 API：媒体相关"></a>33-小程序 API：媒体相关</h2><blockquote><p>了解图片选择和图片展示相关的API</p></blockquote><p><strong>概念介绍</strong></p><ol><li>wx.chooseImage：从手机相册选择照片，或使用手机相机拍照（已弃用）</li><li>wx.chooseMedia：从手机相册选择照片，或使用手机相机拍照（目前正在使用）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">chooseImage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">sizeType</span>: [<span class="string">&#x27;compressed&#x27;</span>, <span class="string">&#x27;original&#x27;</span>],</span><br><span class="line">      <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>],</span><br><span class="line"></span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          <span class="attr">path</span>: res.tempFilePaths[<span class="number">0</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;操作结束!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bind:tap=<span class="string">&quot;chooseImage&quot;</span>&gt;选择图片&lt;/button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;path&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>形成小程序基本认知;  掌握基本语法</p><h2 id="01-小程序api预览图片"><a href="#01-小程序api预览图片" class="headerlink" title="01-小程序api预览图片"></a>01-小程序api预览图片</h2><ul><li>wx.previewImage：图片预览展示（只能预览网络图片，不能是本地图片）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bind:tap=<span class="string">&quot;previewImage&quot;</span>&gt;预览图片&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">previewImage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.previewImage(&#123;</span><br><span class="line">      <span class="attr">urls</span>: [</span><br><span class="line">        <span class="string">&#x27;https://img1.baidu.com/it/u=2371210194,1495988968&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://img0.baidu.com/it/u=2705683877,4119372584&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://img2.baidu.com/it/u=4134461600,792106990&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="02-小程序api上传文件"><a href="#02-小程序api上传文件" class="headerlink" title="02-小程序api上传文件"></a>02-小程序api上传文件</h2><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html">wx.uploadFile</a><ul><li>发起一个post请求</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bind:tap=<span class="string">&quot;uploadImage&quot;</span>&gt;上传图片&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">uploadImage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">sizeType</span>: [<span class="string">&#x27;compressed&#x27;</span>, <span class="string">&#x27;original&#x27;</span>],</span><br><span class="line">      <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>],</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="keyword">const</span> path = res.tempFilePaths[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        wx.uploadFile(&#123;</span><br><span class="line">          <span class="attr">filePath</span>: path,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/api/upload&#x27;</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li>可以<strong>临时启用</strong> 不校验合法域名</li><li>上传到的本地服务器代码在<code>资源/myserver3</code>中, 安装依赖, <code>node server.js</code></li><li>上传成功的图片在upload文件夹中</li></ol><h2 id="03-小程序-API：路由相关"><a href="#03-小程序-API：路由相关" class="headerlink" title="03-小程序 API：路由相关"></a>03-小程序 API：路由相关</h2><blockquote><p>了解编程式路由相关的API</p></blockquote><p><strong>概念介绍</strong></p><ol><li>wx.navigateTo：跳转到应用内的某个页面，不能跳到 tabbar 页面 （push）</li><li><p>wx.redirectTo：重定向的方式跳转到应用内的某个页面，不能跳到 tabbar 页面（replace）<br>A B C<br>A =&gt; C</p></li><li><p>wx.switchTab：跳转到 tabBar 页面(<em>自己测试一下</em>)</p></li></ol><p><code>test-link-a.wxml</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;A页面&lt;/view&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;goToPage&quot;</span>&gt;</span>跳转B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>test-link-a.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">goToPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/test-link-b/test-link-b&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>test-link-b.wxml</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;B页面&lt;/view&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;goToPage&quot;</span>&gt;</span>跳转C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>test-link-b.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">goToPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.redirectTo(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/test-link-c/test-link-c&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>test-link-c.wxml</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;C页面&lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="04-小程序-API：缓存相关"><a href="#04-小程序-API：缓存相关" class="headerlink" title="04-小程序 API：缓存相关"></a>04-小程序 API：缓存相关</h2><blockquote><p>了解本地缓存相关的API<br>localStorage<br><strong>概念介绍</strong></p></blockquote><p>缓存 API 提供了同步和异步版本。在实际开发中的使用原则是：</p><ul><li>如果一次缓存的数据量较大时，推荐使用异步 API</li><li>否则推荐使用同步 API</li></ul><ol><li>setStorage / setStorageSync：设置一个缓存数据</li><li>getStorage / getStorageSync：获取一个缓存数据</li><li>removeStorage / removeStorageSync：删除一个缓存数据</li><li>clearStorage / clearStorageSync：清空所有缓存数据</li><li>getStorageInfo / getStorageInfoSync：获取缓存状态信息</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bind:tap=<span class="string">&quot;setStorage&quot;</span>&gt;设置&lt;/button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;getStorage&quot;</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;removeStorage&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;clearStorage&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;getStorageInfo&quot;</span>&gt;</span>获取存储信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">setStorage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// wx.setStorageSync(&#x27;token&#x27;, &#x27;adadfasdfasdfgfdsgdfsg&#x27;)</span></span><br><span class="line"></span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getStorage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(wx.getStorageSync(<span class="string">&#x27;token&#x27;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">removeStorage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.removeStorageSync(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">clearStorage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.clearStorageSync()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getStorageInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(wx.getStorageInfoSync());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
